package br.com.fiap.gatewaymanagement.main.filters;

import org.springframework.http.HttpHeaders;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.ReactiveSecurityContextHolder;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;

import br.com.fiap.gatewaymanagement.application.usecases.GetUserByEmailInteractor;
import br.com.fiap.gatewaymanagement.application.usecases.ValidateJwtInteractor;
import br.com.fiap.gatewaymanagement.domain.User;
import br.com.fiap.gatewaymanagement.infra.gateways.mappers.GetUserByEmailMapper;
import reactor.core.publisher.Mono;

public class CustomGlobalFilter implements WebFilter {

    private final ValidateJwtInteractor validateJwtInteractor;

    private final GetUserByEmailInteractor getUserByEmailInteractor;

    public CustomGlobalFilter(ValidateJwtInteractor validateJwtInteractor,
            GetUserByEmailInteractor getUserByEmailInteractor) {
        this.validateJwtInteractor = validateJwtInteractor;
        this.getUserByEmailInteractor = getUserByEmailInteractor;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {

        String authHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);

        if (this.getToken(authHeader) != null) {

            var token = this.getToken(authHeader);

            String email;
            User user;

            try {
                email = validateJwtInteractor.execute(token);
                user = getUserByEmailInteractor.execute(email);
            } catch (Exception e) {
                throw new RuntimeException("Invalid token");
            }

            UserDetails userDetails = GetUserByEmailMapper.fromDomain(user);

            var authentication = new UsernamePasswordAuthenticationToken(userDetails, null,
                    userDetails.getAuthorities());

            SecurityContextHolder.getContext().setAuthentication(authentication);

            return chain.filter(exchange)
                    .contextWrite(ReactiveSecurityContextHolder.withAuthentication(
                            new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities())));

        }

        // Continua a requisição para o próximo filtro
        return chain.filter(exchange);
    }

    /**
     * Método responsável por obter o token do header da requisição
     *
     * @param request
     * @return
     */
    private String getToken(String authorization) {

        if (authorization != null && authorization.startsWith("Bearer")) {
            return authorization.split(" ")[1];
        }

        return null;
    }

}
